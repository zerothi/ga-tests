name: Build and test c/pure

inputs:
  arm:  # id of input
    description: 'Also build for arm64, if not native?'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:

  - id: host
    uses: ./.github/reuse_steps/print_host
  - uses: ./.github/reuse_steps/print_compiler

  - name: Intrinsic build
    shell: bash
    run: |
      cd c/pure
      obj=obj_host

      # Just to be sure it is the same as prior steps
      echo CC=$CC
      if [ -z "$CC" ]; then
        echo "Ensuring CC=gcc..."
        export CC=gcc
      fi

      opts=(
        --log-level=debug
        --log-context
        -DCMAKE_RULE_MESSAGES:BOOL=OFF
        -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
      )
      echo "CMake invocation:"
      echo " cmake ${opts[@]} -S. B$obj"
      cmake "${opts[@]}" -S. -B$obj
      cmake --build $obj

      # And test
      cd $obj
      ./pure.x

  # Inspired by:
  # https://github.com/vpetrigo/arm-cmake-toolchains/blob/master/arm-gcc-toolchain.cmake
  - name: Crosscompile for arm64
    shell: bash
    run: |
      cd c/pure
      obj=obj_arm64

      # Just to be sure it is the same as prior steps
      echo CC=$CC
      if [ -z "$CC" ]; then
        echo "Ensuring CC=gcc..."
        export CC=gcc
      fi

      opts=(
        --log-level=debug
        --log-context
        -DCMAKE_RULE_MESSAGES:BOOL=OFF
        -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
      )

      # Apparently forcing the generic
      [ "${{ steps.host.outputs.processor }}" == "arm" ] && exit 0

      if [[ $(uname) == "Darwin" ]]; then
        system_name=Darwin
        processor=ARM
        opts=(${opts[@]}
          -DCMAKE_OSX_ARCHITECHTURES=arm64
        )
      elif [[ $(uname) == "Linux" ]]; then
        system_name=Linux
        processor=ARM
      else
        system_name=Windows
        processor=ARM
      fi
      system_name=Generic

      opts=(${opts[@]}

        -DCMAKE_SYSTEM_NAME=$system_name
        -DCMAKE_SYSTEM_PROCESSOR=$processor
      )
      echo "CMake invocation:"
      echo " cmake ${opts[@]} -S. B$obj"
      cmake "${opts[@]}" -S. -B$obj
      cmake --build $obj

      # We can't test, check it fails when running
      cd $obj
      ./pure.x && exit 1 || exit 0
    if: ${{ inputs.arm == 'true' }}
